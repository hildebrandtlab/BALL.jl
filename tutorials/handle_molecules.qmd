---
title: All on Handling molecules
jupyter: julia-1.10
format: ipynb
---


```{julia}
using BiochemicalAlgorithms
```

# How can I create a simple molecule?
```{julia}
# create a system first

sys = System{Float32}() # this system will be of single precision, i.e., atom positions, velocities... 

h2o = Molecule(sys)
# create system atoms
o1 = Atom(h2o, 1, Elements.O)
h1 = Atom(h2o, 2, Elements.H)
h2 = Atom(h2o, 3, Elements.H)

o1.idx
# set positions of the atoms
# o1.r = Vector3{Float}(0, 0, 0)  <-- this is the default value!
h1.r = Vector3{Float32}(1, 0, 0)
h2.r = Vector3{Float32}(cos(105 * π / 180), sin(105 * π / 180), 0)

# add bonds
Bond(h2o, o1.idx, h1.idx, BondOrder.Single)
Bond(h2o, o1.idx, h2.idx, BondOrder.Single)
# 

println(natoms(h2o))
println(nbonds(h2o))
println.(atom for atom in atoms(h2o))

```

# How can I determine the element type of an atom (i.e., C,N,...)?
The element of an atom is represented by `elements.jl`:

```{julia}

s = load_pdb(ball_data_path("../test/data/AlaAla.pdb"))

for atom in atoms(s)
    if atom.element == Elements.C
        println("This is a carbon atom!")
    end
end

```

# How can I identify backbone atoms?
```{julia}
s = load_pdb(ball_data_path("../test/data/AlaAla.pdb"))

for atom in atoms(s)
    println(atom.element)
    if atom.name in ["C", "O", "N", "HA"]
        println("This is a backbone atom!")
    end
end

```


# How can I get the one-letter code out of a pdb file?
```{julia}
s = load_pdb(ball_data_path("../test/data/AlaAla.pdb"))
for chain in chains(sys)
    print.(res.type for res in residues(sys))

```

# How can I pick one single chain out of a system containing several chains?
This is often needed when a receptor and a ligand are co-complexed and you want to treat them separately. This snippet will create copies of the first two chains and strores them in separate pdb files.
```{julia}
sys = load_pdb(ball_data_path("../test/data/2ptc.pdb"))
chainA = deepcopy(chain_by_idx(sys, 1))
chainB = deepcopy(chain_by_idx(sys, 2))

write_pdb(ball_data_path("../test/data/2ptc_chainA.pdb"), chainA)
write_pdb(ball_data_path("../test/data/2ptc_chainB.pdb"), chainB)

```

# How can I map two configurations of the same protein onto each other?

```{julia}
# read in the first protein
sys = load_pdb(ball_data_path("../test/data/2ptc.pdb"))

# we will generate a second version of the protein by moving it around
sys2 = deepcopy(sys)
translate!(sys2, Vector3{Float32}(2.0,1.0,2.0))

# let's see how far the structures are apart
println(compute_rmsd(sys2,sys))

# now we have two proteins or system we can map together
map_rigid!(sys2,sys)

# let's see how far the structures are apart afterwards
println(compute_rmsd(sys2,sys))
```
