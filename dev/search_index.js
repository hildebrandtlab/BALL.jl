var documenterSearchIndex = {"docs":
[{"location":"public/system/#System-representation","page":"System representation","title":"System representation","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Pages = [\"system.md\"]","category":"page"},{"location":"public/system/#Abstract-types","page":"System representation","title":"Abstract types","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"AbstractSystemComponent\nAbstractAtomContainer\nAbstractMolecule","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.AbstractSystemComponent","page":"System representation","title":"BiochemicalAlgorithms.AbstractSystemComponent","text":"abstract type AbstractSystemComponent{T<:Real}\n\nAbstract base type for all components of a system, including the system itself.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.AbstractAtomContainer","page":"System representation","title":"BiochemicalAlgorithms.AbstractAtomContainer","text":"abstract type AbstractAtomContainer{T} <: AbstractSystemComponent{T}\n\nAbstract base type for all atom containers.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.AbstractMolecule","page":"System representation","title":"BiochemicalAlgorithms.AbstractMolecule","text":"abstract type AbstractMolecule{T} <: AbstractAtomContainer{T}\n\nAbstract base type for all molecules.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#Common-functions","page":"System representation","title":"Common functions","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"has_property\nget_property\nset_property!\nhas_flag\nset_flag!\nunset_flag!","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.has_property","page":"System representation","title":"BiochemicalAlgorithms.has_property","text":"has_property(\n    ac::AbstractSystemComponent,\n    key::Symbol\n) -> Any\n\n\nReturns a Bool indicating whether the given system component has the given property.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.get_property","page":"System representation","title":"BiochemicalAlgorithms.get_property","text":"get_property(\n    ac::AbstractSystemComponent,\n    key::Symbol\n) -> Any\n\n\nReturns the property associated with the given key in ac.\n\n\n\n\n\nget_property(\n    ac::AbstractSystemComponent,\n    key::Symbol,\n    default\n) -> Any\n\n\nReturns the property associated with the given key in ac. If no such property exists, returns default.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.set_property!","page":"System representation","title":"BiochemicalAlgorithms.set_property!","text":"set_property!(\n    ac::AbstractSystemComponent,\n    key::Symbol,\n    value\n) -> Any\n\n\nSets the property associated with the given key in ac to the given value.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.has_flag","page":"System representation","title":"BiochemicalAlgorithms.has_flag","text":"has_flag(ac::AbstractSystemComponent, flag::Symbol) -> Any\n\n\nReturns a Bool indicating whether the given system component has the given flag.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.set_flag!","page":"System representation","title":"BiochemicalAlgorithms.set_flag!","text":"set_flag!(ac::AbstractSystemComponent, flag::Symbol) -> Any\n\n\nAdds the given flag to ac.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.unset_flag!","page":"System representation","title":"BiochemicalAlgorithms.unset_flag!","text":"unset_flag!(\n    ac::AbstractSystemComponent,\n    flag::Symbol\n) -> Any\n\n\nRemoves the given flag from ac.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Systems","page":"System representation","title":"Systems","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"System\ndefault_system\nBase.parent(::System)\nparent_system","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.System","page":"System representation","title":"BiochemicalAlgorithms.System","text":"mutable struct System{T} <: AbstractAtomContainer{T}\n\nMutable representation of a biomolecular system.\n\nFields\n\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nSystem(name::String = \"\", properties::Properties = Properties(), flags::Flags = Flags())\n\nCreates a new and empty System{Float32}.\n\nSystem{T}(name::String = \"\", properties::Properties = Properties(), flags::Flags = Flags())\n\nCreates a new and empty System{T}.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.default_system","page":"System representation","title":"BiochemicalAlgorithms.default_system","text":"default_system() -> System{Float32}\n\n\nReturns the global default system.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.parent-Tuple{System}","page":"System representation","title":"Base.parent","text":"parent(::Atom)\nparent(::Bond)\nparent(::Chain)\nparent(::Fragment)\nparent(::Molecule)\nparent(::Nucleotide)\nparent(::Protein)\nparent(::Residue)\nparent(::System)\n\nReturns the System{T} containing the given object.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#BiochemicalAlgorithms.parent_system","page":"System representation","title":"BiochemicalAlgorithms.parent_system","text":"parent_system(::Atom)\nparent_system(::Bond)\nparent_system(::Chain)\nparent_system(::Fragment)\nparent_system(::Molecule)\nparent_system(::Nucleotide)\nparent_system(::Protein)\nparent_system(::Residue)\nparent_system(::System)\n\nReturns the System{T} containing the given object. Alias for  Base.parent.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Atoms","page":"System representation","title":"Atoms","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Atom\nAtomTuple\natom_by_idx\natom_by_name\natoms\natoms_df\neachatom\nis_bound_to\nis_geminal\nis_vicinal\nnatoms\nBase.push!(::System{T}, ::AtomTuple{T}) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Atom","page":"System representation","title":"BiochemicalAlgorithms.Atom","text":"struct Atom{T} <: AbstractSystemComponent{T}\n\nMutable representation of an individual atom in a system.\n\nFields\n\nidx::Int\nnumber::Int\nelement::ElementType\nname::String\natom_type::String\nr::Vector3{T}\nv::Vector3{T}\nF::Vector3{T}\nformal_charge::Int\ncharge::T\nradius::T\nproperties::Properties\nflags::Flags\n\nConstructors\n\nAtom(\n    number::Int,\n    element::ElementType,\n    name::String = \"\",\n    atom_type::String = \"\",\n    r::Vector3{T} = Vector3{T}(0, 0, 0),\n    v::Vector3{T} = Vector3{T}(0, 0, 0),\n    F::Vector3{T} = Vector3{T}(0, 0, 0),\n    formal_charge::Int = 0,\n    charge::T = zero(T),\n    radius::T = zero(T),\n    properties::Properties = Properties(),\n    flags::Flags = Flags();\n    # keyword arguments\n    frame_id::Int = 1\n)\n\nCreates a new Atom{Float32} in the default system.\n\nAtom(\n    ac::AbstractAtomContainer{T},\n    number::Int,\n    element::ElementType,\n    name::String = \"\",\n    atom_type::String = \"\",\n    r::Vector3{T} = Vector3{T}(0, 0, 0),\n    v::Vector3{T} = Vector3{T}(0, 0, 0),\n    F::Vector3{T} = Vector3{T}(0, 0, 0),\n    formal_charge::Int = 0,\n    charge::T = zero(T),\n    radius::T = zero(T),\n    properties::Properties = Properties(),\n    flags::Flags = Flags();\n    # keyword arguments\n    frame_id::Int = 1\n)\n\nCreates a new Atom{T} in the given atom container (e.g., System{T} or Molecule{T}).\n\nAtom(a::AtomTuple{T}; frame_id::Int = 1)\nAtom(sys::System{T}, a::AtomTuple{T}; frame_id::Int = 1)\n\nConstructor variants that create a new system atom based on the given AtomTuple{T}. The new atom is automatically assigned a new idx.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.AtomTuple","page":"System representation","title":"BiochemicalAlgorithms.AtomTuple","text":"const AtomTuple{T} = NamedTuple{...}\n\nTuple-based atom representation for DataFrame usage.\n\nFields\n\nidx::Int\nnumber::Int\nelement::ElementType\nname::String\natom_type::String\nr::Vector3{T}\nv::Vector3{T}\nF::Vector3{T}\nproperties::Properties\nflags::Flags\n\nConstructors\n\nAtomTuple(\n    number::Int,\n    element::ElementType;\n    # keyword arguments\n    idx::Int = 0,\n    name::String = \"\",\n    atom_type::String = \"\",\n    r::Vector3{T} = Vector3{T}(0, 0, 0),\n    v::Vector3{T} = Vector3{T}(0, 0, 0),\n    F::Vector3{T} = Vector3{T}(0, 0, 0),\n    formal_charge::Int = 0,\n    charge::T = zero(T),\n    radius::T = zero(T),\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new AtomTuple{Float32} with default values for all omitted fields.\n\nAtomTuple{T}(\n    number::Int,\n    element::ElementType;\n    # keyword arguments\n    idx::Int = 0,\n    name::String = \"\",\n    atom_type::String = \"\",\n    r::Vector3{T} = Vector3{T}(0, 0, 0),\n    v::Vector3{T} = Vector3{T}(0, 0, 0),\n    F::Vector3{T} = Vector3{T}(0, 0, 0),\n    formal_charge::Int = 0,\n    charge::T = zero(T),\n    radius::T = zero(T),\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new AtomTuple{T} with default values for all omitted fields.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.atom_by_idx","page":"System representation","title":"BiochemicalAlgorithms.atom_by_idx","text":"atom_by_idx(sys::System{T}, idx::Int64) -> Atom\n\n\nReturns the Atom{T} associated with the given idx in sys. Throws a KeyError if no such atom exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.atom_by_name","page":"System representation","title":"BiochemicalAlgorithms.atom_by_name","text":"atom_by_name(\n    ac::AbstractAtomContainer{T},\n    name::String;\n    frame_id\n) -> Union{Nothing, Atom}\n\n\nReturns the first Atom{T} associated with the given name in ac. Returns nothing if no such atom exists.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing limits the result to atoms matching this frame ID.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.atoms","page":"System representation","title":"BiochemicalAlgorithms.atoms","text":"atoms(::Chain)\natoms(::Fragment)\natoms(::Molecule)\natoms(::Nucleotide)\natoms(::Protein)\natoms(::Residue)\natoms(::System)\n\nReturns a Vector{Atom{T}} containing all atoms of the given atom container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing limits the result to atoms matching this frame ID.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.atoms_df","page":"System representation","title":"BiochemicalAlgorithms.atoms_df","text":"atoms_df(::Chain)\natoms_df(::Fragment)\natoms_df(::Molecule)\natoms_df(::Nucleotide)\natoms_df(::Protein)\natoms_df(::Residue)\natoms_df(::System)\n\nReturns a SubDataFrame containing all atoms of the given atom container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing limits the result to atoms matching this frame ID.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.eachatom","page":"System representation","title":"BiochemicalAlgorithms.eachatom","text":"eachatom(::Chain)\neachatom(::Fragment)\neachatom(::Molecule)\neachatom(::Nucleotide)\neachatom(::Protein)\neachatom(::Residue)\neachatom(::System)\n\nReturns an Atom{T} generator for all atoms of the given atom container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing limits the result to atoms matching this frame ID.\n\nExample\n\nfor atom in eachatom(sys)\n    println(atom.name)\nend\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.is_bound_to","page":"System representation","title":"BiochemicalAlgorithms.is_bound_to","text":"is_bound_to(a1::Atom, a2::Atom) -> Bool\n\n\nDecides if two atoms are bound to each other.\nHydrogen bonds (has_flag(bond, :TYPE__HYDROGEN)) are ignored.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.is_geminal","page":"System representation","title":"BiochemicalAlgorithms.is_geminal","text":"is_geminal(a1::Atom, a2::Atom) -> Union{Missing, Bool}\n\n\nDecides if two atoms are geminal.\n\nTwo atoms are geminal if they do not share a common bond but both have a\nbond to a third atom. For example the two hydrogen atoms in water are geminal. \nHydrogen bonds (has_flag(bond, :TYPE__HYDROGEN)) are ignored.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.is_vicinal","page":"System representation","title":"BiochemicalAlgorithms.is_vicinal","text":"is_vicinal(a1::Atom, a2::Atom) -> Bool\n\n\nDecides if two atoms are vicinal.\n\nTwo atoms are vicinal if they are separated by three bonds (1-4 position). Hydrogen bonds (has_flag(bond, :TYPE__HYDROGEN)) are ignored.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.natoms","page":"System representation","title":"BiochemicalAlgorithms.natoms","text":"natoms(::Chain)\nnatoms(::Fragment)\nnatoms(::Molecule)\nnatoms(::Nucleotide)\nnatoms(::Protein)\nnatoms(::Residue)\nnatoms(::System)\n\nReturns the number of atoms in the given atom container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing limits the result to atoms matching this frame ID.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{System{T}, @NamedTuple{idx::Int64, number::Int64, element::BiochemicalAlgorithms.Elements.T, name::String, atom_type::String, r::StaticArraysCore.SVector{3, T}, v::StaticArraysCore.SVector{3, T}, F::StaticArraysCore.SVector{3, T}, formal_charge::Int64, charge::T, radius::T, properties::Dict{Symbol, Any}, flags::Set{Symbol}}}} where T","page":"System representation","title":"Base.push!","text":"push!(::Fragment{T}, atom::AtomTuple{T})\npush!(::Molecule{T}, atom::AtomTuple{T})\npush!(::Nucleotide{T}, atom::AtomTuple{T})\npush!(::Protein{T}, atom::AtomTuple{T})\npush!(::Residue{T}, atom::AtomTuple{T})\npush!(::System{T}, atom::AtomTuple{T})\n\nCreates a new atom in the given atom container, based on the given tuple. The new atom is automatically assigned a new idx.\n\nSupported keyword arguments\n\nframe_id::Int = 1\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Bonds","page":"System representation","title":"Bonds","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Bond\nBondTuple\nbond_by_idx\nbonds\nbonds_df\neachbond\nnbonds\nBase.push!(::System{T}, ::BondTuple) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Bond","page":"System representation","title":"BiochemicalAlgorithms.Bond","text":"struct Bond{T} <: AbstractSystemComponent{T}\n\nMutable representation of an individual bond in a system.\n\nFields\n\nidx::Int\na1::Int\na2::Int\norder::BondOrderType\nproperties::Properties\nflags::Flags\n\nConstructors\n\nBond(\n    a1::Int, \n    a2::Int, \n    order::BondOrderType, \n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Bond{Float32} in the default system.\n\nBond(\n    sys::System{T}, \n    a1::Int, \n    a2::Int, \n    order::BondOrderType, \n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Bond{T} in the given system.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.BondTuple","page":"System representation","title":"BiochemicalAlgorithms.BondTuple","text":"const BondTuple = NamedTuple{...}\n\nTuple-based bond representation for DataFrame usage.\n\nFields\n\nidx::Int\na1::Int\na2::Int\norder::BondOrderType\nproperties::Properties\nflags::Flags\n\nConstructors\n\nBondTuple(\n    a1::Int,\n    a2::Int,\n    order::BondOrderType;\n    # keyword arguments\n    idx::Int = 0,\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new BondTuple with default values for all omitted fields.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.bond_by_idx","page":"System representation","title":"BiochemicalAlgorithms.bond_by_idx","text":"bond_by_idx(sys::System{T}, idx::Int64) -> Bond\n\n\nReturns the Bond{T} associated with the given idx in sys. Throws a KeyError if no such bond exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.bonds","page":"System representation","title":"BiochemicalAlgorithms.bonds","text":"bonds(::Chain)\nbonds(::Fragment)\nbonds(::Molecule)\nbonds(::Nucleotide)\nbonds(::Protein)\nbonds(::Residue)\nbonds(::System)\n\nReturns a Vector{Bond{T}} containing all bonds of the given atom container where at least one associated atom is contained in the same container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing also limits the result to bonds where at least on atom matches this frame ID.\n\n\n\n\n\nbonds(::Atom)\n\nReturns a Vector{Bond{T}} containing all bonds of the given atom.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.bonds_df","page":"System representation","title":"BiochemicalAlgorithms.bonds_df","text":"bonds_df(::Chain)\nbonds_df(::Fragment)\nbonds_df(::Molecule)\nbonds_df(::Nucleotide)\nbonds_df(::Protein)\nbonds_df(::Residue)\nbonds_df(::System)\n\nReturns a SubDataFrame containing all bonds of the given atom container where at least one associated atom is contained in the same container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing also limits the result to bonds where at least on atom matches this frame ID.\n\n\n\n\n\nbonds_df(::Atom)\n\nReturns a SubDataFrame containing all bonds of the given atom.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.eachbond","page":"System representation","title":"BiochemicalAlgorithms.eachbond","text":"eachbond(::Chain)\neachbond(::Fragment)\neachbond(::Molecule)\neachbond(::Nucleotide)\neachbond(::Protein)\neachbond(::Residue)\neachbond(::System)\n\nReturns a Bond{T} generator for all bonds of the given atom container where at least one associated atom is contained in the same container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing also limits the result to bonds where at least on atom matches this frame ID.\n\n\n\n\n\neachbond(::Atom)\n\nReturns a Bond{T} generator for all bonds of the given atom.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nbonds","page":"System representation","title":"BiochemicalAlgorithms.nbonds","text":"nbonds(::Chain)\nnbonds(::Fragment)\nnbonds(::Molecule)\nnbonds(::Nucleotide)\nnbonds(::Protein)\nnbonds(::Residue)\nnbonds(::System)\n\nReturns the number of bonds in the given atom container where at least one associated atom is contained in the same container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing also limits the result to bonds where at least on atom matches this frame ID.\n\n\n\n\n\nnbonds(::Atom)\n\nReturns the number of bonds of the given atom.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{System{T}, @NamedTuple{idx::Int64, a1::Int64, a2::Int64, order::BiochemicalAlgorithms.BondOrder.T, properties::Dict{Symbol, Any}, flags::Set{Symbol}}}} where T","page":"System representation","title":"Base.push!","text":"push!(ac::AbstractAtomContainer, bond::BondTuple)\n\nCreates a new bond in the system associated with the given atom container, based on the given tuple. The new bond is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Molecules","page":"System representation","title":"Molecules","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Molecule\nMoleculeTuple\neachmolecule\nmolecule_by_idx\nmolecules\nmolecules_df\nnmolecules\nparent_molecule","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Molecule","page":"System representation","title":"BiochemicalAlgorithms.Molecule","text":"struct Molecule{T} <: AbstractMolecule{T}\n\nMutable representation of an individual molecule in a system.\n\nFields\n\nidx::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nMolecule(\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Molecule{Float32} in the default system.\n\nMolecule(\n    sys::System{T},\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Molecule{T} in the given system.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.MoleculeTuple","page":"System representation","title":"BiochemicalAlgorithms.MoleculeTuple","text":"const MoleculeTuple = NamedTuple{...}\n\nTuple-based molecule representation for DataFrame usage.\n\nFields\n\nidx::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nMoleculeTuple(;\n    # keyword arguments\n    idx::Int = 0,\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new MoleculeTuple with default values for all omitted fields.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.eachmolecule","page":"System representation","title":"BiochemicalAlgorithms.eachmolecule","text":"eachmolecule(\n    sys::System{T}\n) -> Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame}, F} where F<:(BiochemicalAlgorithms.var\"#58#59\"{_A, System{T}} where {_A, T})\n\n\nReturns a Molecule{T} generator for all molecules of the given system.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.molecule_by_idx","page":"System representation","title":"BiochemicalAlgorithms.molecule_by_idx","text":"molecule_by_idx(sys::System{T}, idx::Int64) -> Molecule\n\n\nReturns the Molecule{T} associated with the given idx in sys. Throws a KeyError if no such molecule exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.molecules","page":"System representation","title":"BiochemicalAlgorithms.molecules","text":"molecules(sys::System) -> Vector\n\n\nReturns a Vector{Molecule{T}} containing all molecules of the given system.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.molecules_df","page":"System representation","title":"BiochemicalAlgorithms.molecules_df","text":"molecules_df(\n    sys::System{T}\n) -> DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Base.OneTo{Int64}}\n\n\nReturns a SubDataFrame containing all molecules of the given system.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nmolecules","page":"System representation","title":"BiochemicalAlgorithms.nmolecules","text":"nmolecules(sys::System) -> Int64\n\n\nReturns the number of molecules in the given system.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_molecule","page":"System representation","title":"BiochemicalAlgorithms.parent_molecule","text":"parent_molecule(::Atom)\nparent_molecule(::Chain)\nparent_molecule(::Fragment)\nparent_molecule(::Nucleotide)\nparent_molecule(::Residue)\n\nReturns the Molecule{T} containing the given object. Returns nothing if no such molecule exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Chains","page":"System representation","title":"Chains","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Chain\nChainTuple\nchain_by_idx\nchains\nchains_df\neachchain\nnchains\nparent_chain\nBase.push!(::Molecule, ::ChainTuple)","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Chain","page":"System representation","title":"BiochemicalAlgorithms.Chain","text":"struct Chain{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual chain in a system.\n\nFields\n\nidx::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nChain(\n    mol::Molecule{T},\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Chain{T} in the given molecule.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.ChainTuple","page":"System representation","title":"BiochemicalAlgorithms.ChainTuple","text":"const ChainTuple = NamedTuple{...}\n\nTuple-based chain representation for DataFrame usage.\n\nFields\n\nidx::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nChainTuple(;\n    # keyword arguments\n    idx::Int = 0,\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new ChainTuple with default values for all omitted fields.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.chain_by_idx","page":"System representation","title":"BiochemicalAlgorithms.chain_by_idx","text":"chain_by_idx(sys::System{T}, idx::Int64) -> Chain\n\n\nReturns the Chain{T} associated with the given idx in sys. Throws a KeyError if no such chain exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.chains","page":"System representation","title":"BiochemicalAlgorithms.chains","text":"chains(::Molecule)\nchains(::Protein)\nchains(::System)\n\nReturns a Vector{Chain{T}} containing all chains of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.chains_df","page":"System representation","title":"BiochemicalAlgorithms.chains_df","text":"chains_df(::Molecule)\nchains_df(::Protein)\nchains_df(::System)\n\nReturns a SubDataFrame containing all chains of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.eachchain","page":"System representation","title":"BiochemicalAlgorithms.eachchain","text":"eachchain(::Molecule)\neachchain(::Protein)\neachchain(::System)\n\nReturns a Chain{T} generator for all chains of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nchains","page":"System representation","title":"BiochemicalAlgorithms.nchains","text":"nchains(::Molecule)\nnchains(::Protein)\nnchains(::System)\n\nReturns the number of chains in the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_chain","page":"System representation","title":"BiochemicalAlgorithms.parent_chain","text":"parent_chain(::Atom)\nparent_chain(::Fragment)\nparent_chain(::Nucleotide)\nparent_chain(::Residue)\n\nReturns the Chain{T} containing the given object. Returns nothing if no such chain exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.push!-Tuple{Molecule, @NamedTuple{idx::Int64, name::String, properties::Dict{Symbol, Any}, flags::Set{Symbol}}}","page":"System representation","title":"Base.push!","text":"push!(::Molecule, chain::ChainTuple)\npush!(::Protein, chain::ChainTuple)\n\nCreates a new chain in the given molecule, based on the given tuple. The new chain is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Fragments","page":"System representation","title":"Fragments","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Fragment\nFragmentTuple\neachfragment\nfragment_by_idx\nfragments\nfragments_df\nnfragments\nparent_fragment\nBase.push!(::Chain, ::FragmentTuple)","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Fragment","page":"System representation","title":"BiochemicalAlgorithms.Fragment","text":"struct Fragment{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual fragment in a system.\n\nFields\n\nidx::Int\nnumber::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nFragment(\n    chain::Chain{T},\n    number::Int,\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Fragment{T} in the given chain.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.FragmentTuple","page":"System representation","title":"BiochemicalAlgorithms.FragmentTuple","text":"const FragmentTuple = NamedTuple{...}\n\nTuple-based fragment representation for DataFrame usage.\n\nFields\n\nidx::Int\nnumber::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nFragmentTuple(\n    number::Int;\n    # keyword arguments\n    idx::Int = 0,\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new FragmentTuple with default values for all omitted fields.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.eachfragment","page":"System representation","title":"BiochemicalAlgorithms.eachfragment","text":"eachfragment(::Chain)\neachfragment(::Molecule)\neachfragment(::Protein)\neachfragment(::System)\n\nReturns a Fragment{T} generator for all fragments of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.fragment_by_idx","page":"System representation","title":"BiochemicalAlgorithms.fragment_by_idx","text":"fragment_by_idx(sys::System{T}, idx::Int64) -> Fragment\n\n\nReturns the Fragment{T} associated with the given idx in sys. Throws a KeyError if no such fragment exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.fragments","page":"System representation","title":"BiochemicalAlgorithms.fragments","text":"fragments(::Chain)\nfragments(::Molecule)\nfragments(::Protein)\nfragments(::System)\n\nReturns a Vector{Fragment{T}} containing all fragments of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.fragments_df","page":"System representation","title":"BiochemicalAlgorithms.fragments_df","text":"fragments_df(::Chain)\nfragments_df(::Molecule)\nfragments_df(::Protein)\nfragments_df(::System)\n\nReturns a SubDataFrame containing all fragments of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nfragments","page":"System representation","title":"BiochemicalAlgorithms.nfragments","text":"nfragments(::Chain)\nnfragments(::Molecule)\nnfragments(::Protein)\nnfragments(::System)\n\nReturns the number of fragments in the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_fragment","page":"System representation","title":"BiochemicalAlgorithms.parent_fragment","text":"parent_fragment(::Atom)\n\nReturns the Fragment{T} containing the given atom. Returns nothing if no such fragment exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.push!-Tuple{Chain, @NamedTuple{idx::Int64, number::Int64, name::String, properties::Dict{Symbol, Any}, flags::Set{Symbol}}}","page":"System representation","title":"Base.push!","text":"push!(::Chain, frag::FragmentTuple)\n\nCreates a new fragment in the given chain, based on the given tuple. The new fragment is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Nucleotides","page":"System representation","title":"Nucleotides","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Nucleotide\nNucleotideTuple\neachnucleotide\nnnucleotides\nnucleotide_by_idx\nnucleotides\nnucleotides_df\nparent_nucleotide","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Nucleotide","page":"System representation","title":"BiochemicalAlgorithms.Nucleotide","text":"struct Nucleotide{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual nucleotide in a system.\n\nFields\n\nidx::Int\nnumber::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nNucleotide(\n    chain::Chain{T},\n    number::Int,\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Nucleotide{T} in the given chain.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.NucleotideTuple","page":"System representation","title":"BiochemicalAlgorithms.NucleotideTuple","text":"const NucleotideTuple = NamedTuple{...}\n\nTuple-based nucleotide representation for DataFrame usage.\n\nFields\n\nidx::Int\nnumber::Int\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nNucleotideTuple(\n    number::Int;\n    # keyword arguments\n    idx::Int = 0,\n    name::String = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new NucleotideTuple with default values for all omitted fields.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.eachnucleotide","page":"System representation","title":"BiochemicalAlgorithms.eachnucleotide","text":"eachnucleotide(::Chain)\neachnucleotide(::Molecule)\neachnucleotide(::Protein)\neachnucleotide(::System)\n\nReturns a Nucleotide{T} generator for all nucleotides of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nnucleotides","page":"System representation","title":"BiochemicalAlgorithms.nnucleotides","text":"nnucleotides(::Chain)\nnnucleotides(::Molecule)\nnnucleotides(::Protein)\nnnucleotides(::System)\n\nReturns the number of nucleotides in the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nucleotide_by_idx","page":"System representation","title":"BiochemicalAlgorithms.nucleotide_by_idx","text":"nucleotide_by_idx(sys::System{T}, idx::Int64) -> Nucleotide\n\n\nReturns the Nucleotide{T} associated with the given idx in sys. Throws a KeyError if no such nucleotide exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nucleotides","page":"System representation","title":"BiochemicalAlgorithms.nucleotides","text":"nucleotides(::Chain)\nnucleotides(::Molecule)\nnucleotides(::Protein)\nnucleotides(::System)\n\nReturns a Vector{Nucleotide{T}} containing all nucleotides of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nucleotides_df","page":"System representation","title":"BiochemicalAlgorithms.nucleotides_df","text":"nucleotides_df(::Chain)\nnucleotides_df(::Molecule)\nnucleotides_df(::Protein)\nnucleotides_df(::System)\n\nReturns a SubDataFrame containing all nucleotides of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_nucleotide","page":"System representation","title":"BiochemicalAlgorithms.parent_nucleotide","text":"parent_nucleotide(::Atom)\n\nReturns the Nucleotide{T} containing the given atom. Returns nothing if no such nucleotide exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Residues","page":"System representation","title":"Residues","text":"","category":"section"},{"location":"public/system/","page":"System representation","title":"System representation","text":"Residue\nResidueTuple\neachresidue\nnresidues\nparent_residue\nresidue_by_idx\nresidues\nresidues_df\nBase.push!(::Chain, ::ResidueTuple)","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Residue","page":"System representation","title":"BiochemicalAlgorithms.Residue","text":"struct Residue{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual residue in a system.\n\nFields\n\nidx::Int\nnumber::Int\ntype::AminoAcid\nproperties::Properties\nflags::Flags\n\nConstructors\n\nResidue(\n    chain::Chain{T},\n    number::Int,\n    type::AminoAcid,\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Residue{T} in the given chain.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.ResidueTuple","page":"System representation","title":"BiochemicalAlgorithms.ResidueTuple","text":"const ResidueTuple = NamedTuple{...}\n\nTuple-based residue representation for DataFrame usage.\n\nFields\n\nidx::Int\nnumber::Int\ntype::AminoAcid\nproperties::Properties\nflags::Flags\n\nConstructors\n\nResidueTuple(\n    number::Int,\n    type::AminoAcid;\n    # keyword arguments\n    idx::Int = 0,\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.eachresidue","page":"System representation","title":"BiochemicalAlgorithms.eachresidue","text":"eachresidue(::Chain)\neachresidue(::Molecule)\neachresidue(::Protein)\neachresidue(::System)\n\nReturns a Residue{T} generator for all residues of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nresidues","page":"System representation","title":"BiochemicalAlgorithms.nresidues","text":"nresidues(::Chain)\nnresidues(::Molecule)\nnresidues(::Protein)\nnresidues(::System)\n\nReturns the number of residues in the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_residue","page":"System representation","title":"BiochemicalAlgorithms.parent_residue","text":"parent_residue(::Atom)\n\nReturns the Residue{T} containing the given atom. Returns nothing if no such residue exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.residue_by_idx","page":"System representation","title":"BiochemicalAlgorithms.residue_by_idx","text":"residue_by_idx(sys::System{T}, idx::Int64) -> Residue\n\n\nReturns the Residue{T} associated with the given idx in sys. Throws a KeyError if no such residue exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.residues","page":"System representation","title":"BiochemicalAlgorithms.residues","text":"residues(::Chain)\nresidues(::Molecule)\nresidues(::Protein)\nresidues(::System)\n\nReturns a Vector{Residue{T}} containing all residues of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.residues_df","page":"System representation","title":"BiochemicalAlgorithms.residues_df","text":"residues_df(::Chain)\nresidues_df(::Molecule)\nresidues_df(::Protein)\nresidues_df(::System)\n\nReturns a SubDataFrame{T} containing all residues of the given atom container.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.push!-Tuple{Chain, @NamedTuple{idx::Int64, number::Int64, type::BioSymbols.AminoAcid, properties::Dict{Symbol, Any}, flags::Set{Symbol}}}","page":"System representation","title":"Base.push!","text":"push!(::Chain, frag::FragmentTuple)\n\nCreates a new fragment in the given chain, based on the given tuple. The new residue is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"private/system/#Model","page":"System representation","title":"Model","text":"","category":"section"},{"location":"private/system/","page":"System representation","title":"System representation","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"private/system/","page":"System representation","title":"System representation","text":"Pages = [\"system.md\"]","category":"page"},{"location":"private/system/","page":"System representation","title":"System representation","text":"_SystemAtomTuple\n_SystemChainTuple\n_SystemFragmentTuple\n_SystemNucleotideTuple\n_SystemResidueTuple\n_atoms\n_bonds\n_chains\n_default_system\n_fragments\n_molecules\n_nucleotides\n_next_idx\n_residues\n_row_by_idx","category":"page"},{"location":"private/system/#BiochemicalAlgorithms._SystemAtomTuple","page":"System representation","title":"BiochemicalAlgorithms._SystemAtomTuple","text":"const _SystemAtomTuple{T} = NamedTuple{...}\n\nSystem-specific extension of AtomTuple{T}. See AtomTuple.\n\nAdditional fields\n\nframe_id::Int\nmolecule_id::MaybeInt\nchain_id::MaybeInt\nfragment_id::MaybeInt\nnucleotide_id::MaybeInt\nresidue_id::MaybeInt\n\n\n\n\n\n","category":"type"},{"location":"private/system/#BiochemicalAlgorithms._SystemChainTuple","page":"System representation","title":"BiochemicalAlgorithms._SystemChainTuple","text":"const _SystemChainTuple{T} = NamedTuple{...}\n\nSystem-specific extension of ChainTuple{T}. See ChainTuple.\n\nAdditional fields\n\nmolecule_id::Int\n\n\n\n\n\n","category":"type"},{"location":"private/system/#BiochemicalAlgorithms._SystemFragmentTuple","page":"System representation","title":"BiochemicalAlgorithms._SystemFragmentTuple","text":"const _SystemFragmentTuple{T} = NamedTuple{...}\n\nSystem-specific extension of FragmentTuple{T}. See FragmentTuple.\n\nAdditional fields\n\nmolecule_id::Int\nchain_id::Int\n\n\n\n\n\n","category":"type"},{"location":"private/system/#BiochemicalAlgorithms._SystemNucleotideTuple","page":"System representation","title":"BiochemicalAlgorithms._SystemNucleotideTuple","text":"const _SystemNucleotideTuple{T} = NamedTuple{...}\n\nSystem-specific extension of NucleotideTuple{T}. See NucleotideTuple.\n\nAdditional fields\n\nmolecule_id::Int\nchain_id::Int\n\n\n\n\n\n","category":"type"},{"location":"private/system/#BiochemicalAlgorithms._SystemResidueTuple","page":"System representation","title":"BiochemicalAlgorithms._SystemResidueTuple","text":"const _SystemResidueTuple{T} = NamedTuple{...}\n\nSystem-specific extension of ResidueTuple{T}. See ResidueTuple.\n\nAdditional fields\n\nmolecule_id::Int\nchain_id::Int\n\n\n\n\n\n","category":"type"},{"location":"private/system/#BiochemicalAlgorithms._atoms","page":"System representation","title":"BiochemicalAlgorithms._atoms","text":"_atoms(\n    sys::System{T};\n    frame_id,\n    molecule_id,\n    chain_id,\n    fragment_id,\n    nucleotide_id,\n    residue_id\n) -> DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Vector{Int64}}\n\n\nReturns a raw DataFrame for all of the given system's atoms matching the given criteria. Fields given as nothing are ignored. Use Some(nothing) if the field should be explicitly checked for a value of nothing. The returned DataFrame contains all public and private atom fields.\n\n\n\n\n\n_atoms(\n    substruct::Substructure{T};\n    frame_id,\n    molecule_id,\n    chain_id,\n    fragment_id,\n    nucleotide_id,\n    residue_id\n) -> DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Vector{Int64}}\n\n\nReturns a raw DataFrame for all of the given system's atoms matching the given criteria (value or missing). Fields given as nothing are ignored. The returned DataFrame contains all public and private atom fields.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._bonds","page":"System representation","title":"BiochemicalAlgorithms._bonds","text":"_bonds(\n    sys::System;\n    kwargs...\n) -> DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index}\n\n\nReturns a raw DataFrame for all of the given system's bonds associated with at least one atom matching the given criteria. Fields given as nothing are ignored. Use Some(nothing) if the field should be explicitly checked for a value of nothing. See _atoms.\n\n\n\n\n\n_bonds(\n    atom::Atom\n) -> DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index}\n\n\nReturns a raw DataFrame containing all of the given atom's bonds.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._chains","page":"System representation","title":"BiochemicalAlgorithms._chains","text":"_chains(sys::System; molecule_id) -> DataFrames.DataFrame\n\n\nReturns a raw DataFrame for all of the given system's chains matching the given criteria. Fields given as nothing are ignored. The returned DataFrame contains all public and private chain fields.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._default_system","page":"System representation","title":"BiochemicalAlgorithms._default_system","text":"const _default_system\n\nGlobal default system.\n\n\n\n\n\n","category":"constant"},{"location":"private/system/#BiochemicalAlgorithms._fragments","page":"System representation","title":"BiochemicalAlgorithms._fragments","text":"_fragments(\n    sys::System{T};\n    molecule_id,\n    chain_id\n) -> DataFrames.DataFrame\n\n\nReturns a raw DataFrame for all of the given system's fragments matching the given criteria. Fields given as nothing are ignored. The returned DataFrame contains all public and private fragment fields.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._molecules","page":"System representation","title":"BiochemicalAlgorithms._molecules","text":"_molecules(sys::System) -> DataFrames.DataFrame\n\n\nReturns a raw DataFrame for all of the given system's molecules. The returned DataFrame contains all public and private molecule fields.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._nucleotides","page":"System representation","title":"BiochemicalAlgorithms._nucleotides","text":"_nucleotides(\n    sys::System{T};\n    molecule_id,\n    chain_id\n) -> DataFrames.DataFrame\n\n\nReturns a raw DataFrame for all of the given system's nucleotides matching the given criteria. Fields given as nothing are ignored. The returned DataFrame contains all public and private nucleotide fields.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._next_idx","page":"System representation","title":"BiochemicalAlgorithms._next_idx","text":"_next_idx(sys::System{T}) -> Int64\n\n\nReturns the next available idx for the given system.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._residues","page":"System representation","title":"BiochemicalAlgorithms._residues","text":"_residues(\n    sys::System{T};\n    molecule_id,\n    chain_id\n) -> DataFrames.DataFrame\n\n\nReturns a raw DataFrame for all of the given system's residues matching the given criteria. Fields given as nothing are ignored. The returned DataFrame contains all public and private residue fields.\n\n\n\n\n\n","category":"function"},{"location":"private/system/#BiochemicalAlgorithms._row_by_idx","page":"System representation","title":"BiochemicalAlgorithms._row_by_idx","text":"_row_by_idx(df::DataFrames.DataFrame, idx::Int64) -> Int64\n\n\nReturns the row number corresponding to the given idx in df. Throws a KeyError if no such row exists.\n\n\n\n\n\n","category":"function"},{"location":"public/forcefields/#Force-fields","page":"Force fields","title":"Force fields","text":"","category":"section"},{"location":"public/forcefields/","page":"Force fields","title":"Force fields","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"public/forcefields/","page":"Force fields","title":"Force fields","text":"Pages = [\"forcefields.md\"]","category":"page"},{"location":"public/forcefields/","page":"Force fields","title":"Force fields","text":"update!\nread_ball_ini_file","category":"page"},{"location":"public/forcefields/#BiochemicalAlgorithms.update!","page":"Force fields","title":"BiochemicalAlgorithms.update!","text":"Update the internal data structures of the force field when the system changes    (e.g., through coordinate updates)\n\nPlease note that changes to the options or the topology require a call to setup!prior to the call toupdate``.\n\n\n\n\n\n","category":"function"},{"location":"public/forcefields/#BiochemicalAlgorithms.read_ball_ini_file","page":"Force fields","title":"BiochemicalAlgorithms.read_ball_ini_file","text":"read_ball_ini_file(path::String; ...) -> BALLIniFile\nread_ball_ini_file(\n    path::String,\n    T;\n    cleanup_keys\n) -> BALLIniFile\n\n\nRead a file in BALL's old Ini file format and return it as a BALLIniFile.\n\nIf cleanup_keys is set to true (the default), keys into the Ini sections are simplified (e.g., ver:version becomes version, key:I becomes I, ...).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"#BiochemicalAlgorithms","page":"Home","title":"BiochemicalAlgorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BiochemicalAlgorithms.","category":"page"}]
}
