

@testitem "predict secondary structure for BPTI" begin

    function get_unified_secondary_structure_type(type)
        result = 'L'
        if type == 'H'  # ss->setType(SecondaryStructure::HELIX);
						# ss->setProperty("HELIX_TYPE", "ALPHA");
			result = 'H'
		elseif type == 'G'  # ss->setType(SecondaryStructure::HELIX);
						    # ss->setProperty("HELIX_TYPE", "THREE_TEN");
			result = 'G'
        elseif type == 'I'  # ss->setType(SecondaryStructure::HELIX);
						    # ss->setProperty("HELIX_TYPE", "PI");
			result = 'I'
	    elseif type == 'E'  # ss->setType(SecondaryStructure::STRAND);
			result = 'E';				 
        else  #ss->setType(SecondaryStructure::COIL);
			result = 'L'
        end
        #println("DEBUG TEST get_unified_secondary_structure_type(type)" , type, "--->", result)
        return result
	end

    function get_secondary_structures(summary)
         
        #println("DEBUG DSSP test get_secondary_structures: given ", summary)

        # 
        last_ss_type = 'X'
        #println(last_ss_type)
         
        # each tuple contains
        #  first:  the ss type
        #  second: the index of the starting residue
        secondary_structures = Vector{Tuple{Char,Int64}}() 
        
        #println("laenge summary:", length(summary))
        
        for i in 1:length(summary)
            
            #println("DEBUG DSSP test get_secondary_structures: i ", i, "last_type =",  last_ss_type , ",", summary[i])
            
            # a switch in the SS type
            # depending on the last type of secondary structure we have seen,
		    # we need to react differently to merge them sensibly
            if last_ss_type != summary[i]
                if last_ss_type == 'L' 
                    # we are in a loop
                    # note that we identify 'real' loops, isolated bridges and turns (-,B,T)
                    # and map them all to loops. Thus we need to determine here if the current
                    # residue also maps to a loop (we already know that the last residue was one)
                    if summary[i] âˆˆ ['-', 'B','T']
                        continue; # nothing to see here... please walk on...
                    else # the current residue is not of type loop => build a new SecondaryStructure 
                        last_ss_type = get_unified_secondary_structure_type(summary[i])
                        ss = (last_ss_type, i)
                        push!(secondary_structures, ss)
                    end
                else	# in all other cases, setSecondaryStructure does the hard work
                    last_ss_type = get_unified_secondary_structure_type(summary[i])
                    ss = (last_ss_type, i)
                    push!(secondary_structures, ss)
 
                end     
            end 
            #resnum += 1
        end
        #println("TEST RESULT:")
        #println(String(summary))
        #println(" Secondary structures: ", secondary_structures)
        
        secondary_structures
    end

    default_fdb = FragmentDB()
    fdb = FragmentDB(ball_data_path("fragments/Fragments.db.json"))
    sys = load_pdb(ball_data_path("../test/data/PDBFile_test2.pdb"))
   
    normalize_names!(sys, fdb)
    reconstruct_fragments!(sys, fdb)
    build_bonds!(sys, fdb)
    predict_hbonds!(sys, :KABSCH_SANDER)
    summary = predict_secondary_structure!(sys)
    
    #@test natoms(sys) == 892 ## vorher 892 TODO checken ob das an Cysteinen liegt

    #println("BPTI test result: ", String(summary))
    #println("soll            : --GGGG-----------EEEEEEETTTTEEEEEEE---------B--HHHHHHHH---")

    # the reference was generated by the C++ BALL version
    @test String(summary) == "--GGGG-----------EEEEEEETTTTEEEEEEE---------B--HHHHHHHH---"
    @test length(get_secondary_structures(summary)) == 9
    
    # the following was additionally 'compared to' in the C++ version 
	#String PDB_summary = "CCGGGGSCCCCCSCCCCEEEEEEETTTTEEEEEEECSSSCCSSCBSSHHHHHHHHSCC";
    


    function predict_secondary_structure(sys)
        default_fdb = FragmentDB()
        fdb = FragmentDB(ball_data_path("fragments/Fragments.db.json"))
    
       
        normalize_names!(sys, fdb)
        reconstruct_fragments!(sys, fdb)
        build_bonds!(sys, fdb)
        predict_hbonds!(sys, :KABSCH_SANDER)
        summary = predict_secondary_structure!(sys)

        return summary
    end

    ### 5pti.pdb
    sys_5pti = load_pdb(ball_data_path("../test/data/5PTI_filtered.pdb"))
    #@test String(predict_secondary_structure(sys_5pti)) == 
     #   "--GGGG-----------EEEEEEETTTTEEEEEEE---------B--HHHHHHHH---"
    println("5pti:", String(predict_secondary_structure(sys_5pti)))
    println("    :", "--GGGG-----------EEEEEEETTTTEEEEEEE---------B--HHHHHHHH---")
    println(fragments_df(sys_5pti).name)

    #### 3fgu.pdb
    #sys_3fgu = load_pdb(ball_data_path("../test/data/3fgu.pdb"))
    #println("3fgu:", String(predict_secondary_structure(sys_3fgu)))
    #println("    :", "-HHHHHHHHHHHHHHHGGG---HHHHHHHHHHHHHHHHHHH-TTTTT------EE---B------EEEEEEEE---EEEEEEEEEETTTEEEE-EEEEEE--HHHHH-BHHHHHHHHHHHHHHHHHTTT----EEEEEE--EEEE-BTTEEEE-B--TT---BT-BT-BHHHHHHHHHHHH-----EE-EEE-HHHHHHHHTTTT-TTB-EEEEE---EEEEEEEEGGG-TT------EEEEE--GGGTTTT-TTGGG--HHHHHHHHT-TTTT--TTGGG--HHHHHHHHHHHHHHHHHTT--GGG---TTTT-TT---HHHHHHHHT-----HHHHHHHHHTT----HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHTT---EEEEEEEE-HHHHH---HHHHHHHHHHHH-TTEEEEEEE---HHHHHHHHHHHHH--")

    ### 2ptc.pdb
    #sys_2ptc = load_pdb(ball_data_path("../test/data/2ptc.pdb"))
    #println("2ptc:", String(predict_secondary_structure(sys_2ptc)))
    #println("    :", "-BT-EE--TT--TTEEEEE---B-EEEEE-BTTEEEE-GGG-----EEEE----TT------EEEEE-EEEE-TT--TTT-TT--EEEEE-------------EE------TT-EEEEEE--B-------B----EEEEEEE--HHHHHHHTTT---TTEEEEE-TT---B--TT-TT-EEEETTEE-EEE-B------TT--EEEEEGGGGHHHHHHHHHT-")

    ### 6nxl.pdb
    #sys_6nxl = load_pdb(ball_data_path("../test/data/6nxl.pdb"))
    #println("6nxl:", String(predict_secondary_structure(sys_6nxl)))
    #println("    :", "-------------------TT-BHHHHHHHHHHHH---GGGEEEEETTEE--TT-BTGGGT--TT---EEEE---")

    #println(fragments_df(sys).name)

end